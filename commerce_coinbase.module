<?php

/**
 * @file
 * Provides a Coinbase payment method for Drupal Commerce.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_coinbase_libraries_info() {
  $libraries['coinbase-php'] = array(
    'name' => 'Coinbase PHP client library',
    'vendor url' => 'https://coinbase.com',
    'download url' => 'https://github.com/coinbase/coinbase-php',
    'path' => 'lib',
    'files' => array(
      'php' => array('Coinbase.php'),
    ),
    'version arguments' => array(
      'file' => 'composer.json',
      'pattern' => '/([0-9\.]+)/',
      'lines' => 20,
    ),
  );
  return $libraries;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_coinbase_commerce_payment_method_info() {
  $payment_methods['coinbase'] = array(
    'base' => 'commerce_coinbase',
    'title' => t('Coinbase'),
    'display_title' => t('Bitcoin'),
    'short_title' => t('Bitcoin'),
    'description' => t('Coinbase Bitcoin API'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'file' => 'includes/commerce_coinbase.callbacks.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_coinbase_menu() {
  // Define an always accessible path to receive IPNs.
  $items['coinbase/callback/%commerce_payment_transaction/%'] = array(
    'title' => 'Coinbase Callback',
    'page callback' => 'commerce_coinbase_process_callback',
    'page arguments' => array(2),
    'access callback' => 'commerce_coinbase_callback_access',
    'access_arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_coinbase.callbacks.inc',
  );
  // This is where user goes after clicking "Go Back" on payment redirect form.
  $items['checkout/%commerce_order/commerce_coinbase/cancel_payment'] = array(
    'title' => 'Cancel checkout payment',
    'page callback' => 'commerce_coinbase_cancel_payment',
    'page arguments' => array(1),
    'access callback' => 'commerce_checkout_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu access callback for Coinbase callbacks.
 *
 * @param object $transaction
 *   Commerce payment transaction.
 * @param string $secret
 *   Random hash assumed to be associated with a transaction.
 *
 * @return bool
 *   TRUE if callback secret is valid, FALSE otherwise.
 */
function commerce_coinbase_callback_access($transaction, $secret) {
  return $transaction->data['secret'] == $secret;
}

/**
 * Returns the default settings for the Coinbase payment method.
 *
 * @return array
 *   Returns the default settings to populate the configuration form.
 */
function commerce_coinbase_default_settings() {
  return array(
    // An API key is required eventually for proper function.
    'api_key' => '',
    'type' => 'buy_now',
    'style' => 'large',
    'text' => t('Pay With Bitcoin'),
    'redirect_mode' => 'iframe',
  );
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function commerce_coinbase_commerce_checkout_pane_info_alter(&$checkout_panes) {
  /*
  When users try to click the "Complete checkout" button on the iframe payment
  page, but the paid callback hasn't been received yet, there's a
  drupal_set_message warning accompanied by "Off-site payment redirect".
  This alter un-sets that redirect title so that it just shows the warning.
  */
  $checkout_panes['commerce_payment_redirect']['title'] = '';
}

/**
 * Implements hook_commerce_checkout_page_info_alter().
 */
function commerce_coinbase_commerce_checkout_page_info_alter(&$checkout_pages) {
  $checkout_pages['payment']['help'] = t('Use your Bitcoin client to send payment to the address on the invoice. Once the payment is acknowledged on the blockchain, you may proceed to complete checkout.');
}

/**
 * Page callback for "Go Back" button on payment page.
 *
 * @param object $order
 *   Commerce order object.
 */
function commerce_coinbase_cancel_payment($order) {
  $order = commerce_order_status_update($order, 'checkout_review');
  drupal_goto(commerce_checkout_order_uri($order));
}

/**
 * Creates a payment transaction for the specified charge amount.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_coinbase_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('coinbase', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = 'Default';
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = 'Initialized transaction';
  $transaction->message_variables = array();
  $transaction->data['secret'] = sha1(mt_rand() . uniqid());

  commerce_payment_transaction_save($transaction);
}
